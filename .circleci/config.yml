version: 2.1
orbs:
  slack: circleci/slack@4.9.3

commands:
  notify_on_failure:
    steps:
      - slack/notify:
          event: fail
          channel: 02-general
          template: basic_fail_1

  install_nodejs:
    description: Install Node.js 13
    steps:
      - run:
          name: Install Node.js 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs
            sudo npm install --global n
            sudo n 13.8.0
            
  install_aws_cli:
    description: Install AWS CLI
    steps: 
      - run: 
            name: Install AWS CLI
            command: |
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip awscliv2.zip
                sudo ./aws/install

  install_ansible:
    description: Install Ansible
    steps: 
      - run: 
            name: Install Ansible
            command: |
                sudo apt update
                sudo apt install software-properties-common -y
                sudo add-apt-repository --yes --update ppa:ansible/ansible
                sudo apt install ansible -y
  revert-migrations:
    description: Revert the last migration
    parameters:
      myWorkFlowId:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.myWorkFlowId >>)
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      myWorkFlowId:
        type: string  
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name my-backend-<< parameters.myWorkFlowId >>
            aws s3 rm s3://udapeople-<< parameters.myWorkFlowId >> --recursive
            aws cloudformation delete-stack --stack-name my-frontend-<< parameters.myWorkFlowId >>
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [my-frontend-cache]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: my-frontend-cache
      - notify_on_failure
  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [my-backend-cache]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: my-backend-cache
      - notify_on_failure

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [my-frontend-cache]
      - run:
          name: Unit Test frontend
          command: |
            cd frontend
            npm i
            npm test
      - notify_on_failure

  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [my-backend-cache]
      - run:
          name: Unit Test backend
          command: |
            cd backend
            npm i
            npm test
      - notify_on_failure
   
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [my-frontend-cache]
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm i
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
      - notify_on_failure

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [my-backend-cache]
      - run:
          name: Scan backend
          command: |
            cd backend
            npm i
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
      - notify_on_failure
  
  
  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_aws_cli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=my-backend  \
              --stack-name "my-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=my-frontend \
              --stack-name "my-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add backend ip to ansible inventory
          command: |
            pwd
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            echo ${BACKEND_IP} >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment  

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_ansible
      - install_aws_cli
      - add_ssh_keys:
          fingerprints: ["e4:d6:d8:11:5c:ac:44:8f:d9:7e:db:e8:5e:74:1c:be"]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml    
      - destroy-environment

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install_aws_cli
      - restore_cache:
          keys: [my-backend-cache]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully" ~/project/backend/migrations_dump.txt;
            then
              echo "Database migration executed successfully"
              curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
              echo "Database migration failed!"
            fi      
      - destroy-environment
      - revert-migrations


#   deploy-backend:
#     docker:
#       - image: python:3.7-alpine3.11
#     steps:
#       - checkout
#       - add_ssh_keys:
#           fingerprints: 
#             - "e2:c9:22:04:6c:5c:91:d9:6b:fa:69:21:5b:be:a7:ad"
#       - attach_workspace:
#           at: .
#       - restore_cache:
#           keys: [my-backend-cache]
#       - run:
#           name: Install dependencies
#           command: |
#             apk add --update ansible
#             apk add --no-cache curl
#             apk add --no-cache openssh-client
#             apk add --no-cache --upgrade bash
#             pip install awscli
#       - create-dotenv-file
#       - run:
#           name: Deploy backend
#           command: |
#             pwd
#             tar czf backend.tar.gz backend/
#             export ANSIBLE_HOST_KEY_CHECKING=false
#             ansible-playbook -i ./.circleci/ansible/inventory.txt ./.circleci/ansible/deploy-backend.yml -vvv
#       - destroy-environment:
#           myWorkFlowId: ${CIRCLE_WORKFLOW_ID:0:7}
#       - revert-migrations:
#           myWorkFlowId: ${CIRCLE_WORKFLOW_ID:0:7}  
  
  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_aws_cli
      - install_nodejs
      - restore_cache:
          keys: [my-frontend-cache]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations


#   smoke-test:
#     docker:
#       - image: alpine:latest  
#     steps:
#       - checkout
#       - attach_workspace:
#           at: .
#       - run:
#           name: Install dependencies
#           command: |
#             apk --no-cache add curl
#             apk add --update npm
#             apk add --no-cache python3 py3-pip \
#               && pip3 install --upgrade pip \
#               && pip install awscli
#       - create-dotenv-file
#       - run:
#           name: Backend smoke test.
#           command: |
#             BACKEND_IP=$(curl -H "token: 7079126b-54c1-4ae1-b7cf-577d8a27c76f" --request GET https://api.memstash.io/values/BACKEND_IP_${CIRCLE_WORKFLOW_ID:0:7})
#             API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#             curl -s "${API_URL}/api/status" -v
#       - run:
#           name: Frontend smoke test.
#           command: |
#             URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com"
#             curl -s ${URL} | grep "Welcome"
#       - destroy-environment:
#           myWorkFlowId: ${CIRCLE_WORKFLOW_ID:0:7}
#       - revert-migrations:
#           myWorkFlowId: ${CIRCLE_WORKFLOW_ID:0:7}  

#   cloudfront-update:
#     docker:
#       - image: amazon/aws-cli
#     steps:
#       - checkout
#       - run:
#           name: Install dependencies
#           command: |
#             yum install -y tar gzip curl
#             curl -sL https://rpm.nodesource.com/setup_10.x | bash -
#             yum install -y nodejs
#       - run:
#           name: Send old workflow ID to memstash
#           working_directory: ./.circleci/files
#           command: |
#             OLD_WORKFLOW_ID=$(aws cloudformation list-exports \
#               --query "Exports[?Name==\`myWorkFlowId\`].Value" \
#               --no-paginate --output text)
#             echo "OLD_WORKFLOW_ID=$OLD_WORKFLOW_ID"
#             curl -H "Content-Type: text/plain" -H "token: 7079126b-54c1-4ae1-b7cf-577d8a27c76f" --request PUT --data "$OLD_WORKFLOW_ID" https://api.memstash.io/values/OLD_WORKFLOW_ID
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             aws cloudformation deploy \
#               --template-file ./.circleci/files/cloudfront.yml \
#               --tags project=udapeople \
#               --stack-name "udapeople-cloudfront-production" \
#               --parameter-overrides myWorkFlowId="${CIRCLE_WORKFLOW_ID:0:7}"
#       - destroy-environment:
#           myWorkFlowId: ${CIRCLE_WORKFLOW_ID:0:7}
#       - revert-migrations:
#           myWorkFlowId: ${CIRCLE_WORKFLOW_ID:0:7}  

# cleanup:
#     docker:
#       - image: amazon/aws-cli
#     steps:
#       - checkout
#       - run:
#           name: Get old workflow ID and remove old stacks and files
#           command: |
#             OLD_WORKFLOW_ID=$(curl -H "token: 7079126b-54c1-4ae1-b7cf-577d8a27c76f" --request GET https://api.memstash.io/values/OLD_WORKFLOW_ID)
#             echo "OLD_WORKFLOW_ID=$OLD_WORKFLOW_ID"
#             NEW_WORKFLOW_ID=${CIRCLE_WORKFLOW_ID:0:7}
#             echo "NEW_WORKFLOW_ID=$NEW_WORKFLOW_ID"
#             if [ -z "$OLD_WORKFLOW_ID" ]
#             then
#                 echo "No OLD_WORKFLOW_ID found, nothing to cleanup."
#             else
#                 if [[ "$NEW_WORKFLOW_ID" != "$OLD_WORKFLOW_ID" ]]
#                 then
#                     echo "$OLD_WORKFLOW_ID!=$NEW_WORKFLOW_ID: the old stack and files are going to be deleted"
#                     aws s3 rm "s3://udapeople-${OLD_WORKFLOW_ID}" --recursive
#                     aws cloudformation delete-stack --stack-name "my-frontend-stack-${OLD_WORKFLOW_ID}"
#                     aws cloudformation delete-stack --stack-name "my-backend-stack-${OLD_WORKFLOW_ID}"
#                 else
#                     echo "$OLD_WORKFLOW_ID==$NEW_WORKFLOW_ID: the old and new stacks are the same, no changes applied"
#                 fi
#             fi
  notify_on_success:
    docker: 
      - image: cimg/base:stable
    steps: 
      - slack/notify:
          event: pass
          channel: 02-general
          template: success_tagged_deployment_1
          
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - notify_on_success:
          requires:
            - test-frontend
            - test-backend
            - scan-backend
            - scan-frontend
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]